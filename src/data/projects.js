export const projectData = [
    {
      title: "CoolDown.io: Educational sustainability games",
      type: {1:"2024"},
      description: "Developing games that educate on the energy transition and sustainability.",
      full_text: `
      <p> 3D table-top web game prototype with Three.js (prototype): <a href="https://cd-game.vercel.app/" style="color: blue; text-decoration: underline;"> Prototype Link</a>. Unity 2D tower defense pixel art game: <a href=https://cd-web-and-backend.vercel.app/games" style="color: blue; text-decoration: underline;">cool-down.io/games</a></p>
      <p id="context" style="font-size: 1.2em; font-weight: bold;">Context</p>
      <p> While traveling the world on a gap year in 2023/24, I wanted to learn a new aspect of software development: games. Building on my web development skills, I started by creating a web browser tabletop game concept prototype using the JavaScript library three.js. The prototype turned out well, but I realized that without the tools offered by a game development environment, it would be a lot of work to turn the prototype into a full game and publish it.</p>
      <p id="Progress" style="font-size: 1.2em; font-weight: bold;">Progress</p>
      <p> So I started from scratch again, this time in Unity, with the idea to create a simple 2D tower defense game: WattWars. Think Plant vs Zombies but with energy towers. The game is stll in devellopment but a full 10/15 minutes demo will be available in September.</p>
      `,
      date: "2024",
      tags: {1:"React",2:"Three.js",3:"Unity"},
      image: "https://t3-portofolio.s3.us-east-2.amazonaws.com/thumbnails/cooldown.png"
    },
    {
      title: "Riples: Collaborative Social Media",
      type: {1:"2023"},
      description: "Building a project hosting, sharing, and collaboration platform.",
      full_text: `
       <p> Check out Riples here (prototype): <a href="https://riples.vercel.app/about" style="color: blue; text-decoration: underline;">www.riples.app</a> !</p><p id="context" style="font-size: 1.2em; font-weight: bold;">Context</p><p>Having taken a sabbatical from my job as a data engineer, in a solar manufacturing start-up, I was keen to try my own luck in entrepreneurship. I decided to build a product to solve the problem of wasted human capital on social media (we spend an average of 2hrs on social media, with developing countries spending even more time on these often counter-productive applications). </p><p>The idea for the product, Riples, was to have the same ‚Äúhooks‚Äù and ‚Äúhabit building‚Äù features behind existing social media, merged with project management and collaboration software features to incentivise user collaboration on any kind of projects. The video below is a good explainer:</p> <div style="display: flex; justify-content: center;"> <iframe width="560" height="315" src="https://www.youtube.com/embed/lbyVFgKV3Oc?si=eVWZAMk6REtyApGO" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe> </div> <p>I knew the product I wanted to build, but had multiple options for moving forward (eg. test collaborating on problems to learn the problems, build a mobile app prototype ..). I ended up deciding to build a web-app Minimum Viable Product (MVP), and giving myself clear deadlines with targets, to mitigate the risks of spending all my time for nothing.</p><p> Therefore, after a month of learning web development technology and figuring out other stuff (BM, name and logo‚Ä¶), I applied an agile approach, for the next 3 months (Sept-Nov) with lot‚Äôs of user testing, releases to my network, prioritising features build, gathering and understanding usage data ‚Ä¶ After which (in Dec 23‚Äô), I decided to put this project on the back-burner due to lack of uptake and realising that I wasn‚Äôt passionate enough about social media to spend all my time on this project any more. Below you will find more details on this project: Challenges encountered, What I ended up building, and Lessons learned. </p><p id="interesting-challenges" style="font-size: 1.2em; font-weight: bold;">Interesting Challenges</p><p>There was a lot of fun and interesting challenges with building this web-app, from learning new languages and frameworks like React and Typescript, entrepeunarial challenges like finding the right thing to build or even finding a name and designing a logo. However, there is a lot of tutorials and ressource to help me solve those, so instead I want to highlight 2 AI related challenges I encoutered, as these were novel. </p><p> <strong> 1 - Building an interface with OpenAI‚Äôs API for actions and actions approval:</strong> </p><p> Actions were a new feature introduced in OpenAI‚Äôs first developer day (6/11/23), where the LLM process user input and have the ability to call functions with parameters.  So I wanted Riples‚Äô users to be able to streamline a bunch of their project management task (eg. Move all tasks related to project X to backlog and update the description to explain it is deprioritised).  This was really fun and challenging because it involved back and forth logic between the client / server and OpenAI APIs. Below is a diagram showcasing what I came up with in a first solution iteration </p><div style="display: flex; justify-content: center;">  <div style="text-align: center;">    <img src="https://t3-portofolio.s3.us-east-2.amazonaws.com/thumbnails/OpenAILucid.png" alt="OpenAI API Interface" style="width: auto; margin: 0 auto; display: block;" class="responsive-image">    <p style="font-style: italic;">OpenAI API Client/Server/API Interface diagram to allow user approval on actions on Riples. You can left click on the image for better resolution. </p>  </div></div><p > <strong> 2 - Building a Wizard, like ‚ÄúClippy‚Äù in Excel  </strong> </p><p> I build a ‚Äúwizard‚Äù, which was an overlay button that would always be in the bottom left corner of the web-app that the user could interact with for AI interactions. depending on which page it was opened could:</p><ul>  <li>Chat with the user (back and forth) with for example information about a project</li> <li>Onboard the user, with helpers and checkers for certain tasks validations (eg. help the user create a project and display (left screenshot below)</li> <li>Create content for the user based on other entries (eg. breakdown a project into tasks - middle screenshot below)</li><li>Transform raw text into custom HTML (with headings, fonts, pictures, text formatting ‚Ä¶). The idea was to allow more creativity in posts by having an AI generate HTLM rich content based on text.</li></ul><div style="display: flex; justify-content: center;">  <div style="text-align: center;">    <img src="https://t3-portofolio.s3.us-east-2.amazonaws.com/thumbnails/RiplesWizardScreens.png" alt="Riples‚Äô Wizard Variations" style="width: auto; margin: 0 auto; display: block;" class="responsive-image">    <p style="font-style: italic;">Different variations of the Riples‚Äô Wizard, depending on which page the user would click the overlay. </p>  </div></div><p id="what-i-ended-up-building" style="font-size: 1.2em; font-weight: bold;">What I ended up building</p><p>After three months, I was very far from reaching my targets (20 registered users vs a goal of a 1000 - people could view without logging in but to create they had to log-in), so I decided to shift my focus to another project (also, I was less enthusiastic about building a social media). In the end, I had build a web-app, where any user could:</p><p><strong>Social Features:</strong></p><ul>  <li>Sign-up and authenticate via email or third party service providers (Github, Google, Linkedin)</li>  <li>See a feed of project updates from other users (no machine learning recommendation)</li>  <li>Like & Comment on these updates</li>  <li>Receive notifications based on likes and comments on their posts</li></ul><p><strong>Project Management Feature:</strong></p><ul>  <li>Create and manage projects with different visibility (private/public) and collaboration (solo/collab) settings</li>  <li>Create and manage Tasks linked to projects</li>  <li>Create and manage SubTasks linked to Tasks</li>  <li>Manage task and project accessibility for collaborative projects</li>  <li>Upload photos to their project cover and project posts</li>  <li>Manage and post updates on goals attached to projects</li></ul><p>And these were also complemented by quite a lot of AI features. Hopefully, Riples is still live on <a href="https://www.riples.app/" style="color: blue; text-decoration: underline;">www.riples.app</a> for you to check it out and give me feedback on it üôÇ !</p><div style="display: flex; justify-content: center;">  <div style="text-align: center;">    <img src="https://t3-portofolio.s3.us-east-2.amazonaws.com/thumbnails/ERD.jpg" alt="Riples ERD" style="width: auto; margin: 0 auto; display: block;" class="responsive-image">    <p style="font-style: italic;">Riples Entity Relationship Diagram (ERD). You can left click on the image for better resolution. </p>  </div></div><p id=‚Äúlessons-learned‚Äù style="font-size: 1.2em; font-weight: bold;">Lessons Learned</p><p>The biggest lessons learned were entrepreneurial one‚Äôs, such as for example the concept of Founder / Product Fit (and that I was not the person for building social media), but here I list what I learned in regard to software development..</p><p><strong>Software skills learned:</strong></p><ul>  <li>New frameworks: React, Tailwind, Next.js, and TRPc.</li>  <li>New languages: TypeScript, and CSS.</li>  <li>Authentification with NextAuth.</li>  <li>Images uploading and loading with AWS.</li>  <li>Complex API and Data Streaming with OpenAI‚Äôs API (Data Streaming & Actions).</li>  <li>CI/CD with full-stack app.</li>  <li>Product on-boarding using react-joyride and custom-made task helper & checker.</li>  <li>User testing (UX and UI).</li></ul><p><strong>I also learned:</strong></p><ul>  <li>Use your own product as soon as possible (in this case for me to manage my project)</li>  <li>Should have done more customer interviews before building (to define the problem better, using the ‚ÄúMom test‚Äù principles)</li>  <li>I made the error to view the UI as the product, but similar to social media I think the real product was the machine learning algorithm</li>  <li>Define value and growth hypothesis early and use data monitoring to prove / disprove your hypotheses and pivot.</li></ul>   
      `,
      link: "https://riples.vercel.app/about",
      date: "2023",
      tags: {1:"React",2:"Typescript",3:"Tailwind",4:"Next.js",5:"Vercel",6:"Node.js",7:"AWS",8:"OpenAI APIs"},
      image: "https://t3-portofolio.s3.us-east-2.amazonaws.com/thumbnails/Riples.png"
    },
   {
        title: "AWS Data Warehousing",
        type: {1:"2022", 2:"2023"},
        description: "Ingesting data from 5 sources, giving product insights and traceability from factory to field, accessible through reports and dashboards.",
        full_text: `
        <p id="context" style="font-size: 1.2em; font-weight: bold;">Project Context</p><p>
        Working for a manufacturing solar start-up (~200 employees), I pitched and executed the development of a centralized database to store, centralize, and leverage business and product data from factory to field for two distinct business cases.</p>
        The project involved creating data pipelines from 5B‚Äôs ERP, CRM, project planning, and field reporting software into AWS object storage and a structured PostgreSQL database. This project saved 50+hrs/month  in data entry & retrieval, with data was made accessible to internal customers via 4 live dashboards, reports, and SQL queries for in-depth analysis.</p>
         <p id="context" style="font-size: 1.2em; font-weight: bold;">Challenges</p>
         <p>One technical challenge was understanding and querying the heavily customized Odoo ERP data was difficult, particularly linking components of a 4-level BoM to Purchase Orders and Transfer Orders for supplier traceability. </p> Another challenge was to handle various roles, including database architecture, data analysis, cloud setup, and data engineering, while managing and mentoring an intern. I was new to cloud engineering, an dI had to learn a lot of best practices on the fly. </p> <p> To address these challenges, I maintained clear communication with stakeholders, adhered to a bi-monthly release schedule, and sought advice from colleagues with similar experiences.</p>
         <p id="context" style="font-size: 1.2em; font-weight: bold;">Project Outcome</p>
         <p>In just 6 months of work (at 50% FTE), our small team provided the first source of truth for data at a company level. </p>
         <p> We managed to reduce data entry and retrieval time (eg. for board meetings, product owners), by 50+ hrs/week; make project, supply chain, and engineering data very accessible via dashboards and reports. Ultimately, management decided to continue the project , and I assisted in hiring a successor to expand on this initial data infrastructure. </p>
        `,
        date: "2022-2023",
        tags: {1:"AWS",2:"SQL",3:"Python",4:"ETL",5:"Database Architecture",6:"DataLake"},
        image: "https://t3-portofolio.s3.us-east-2.amazonaws.com/thumbnails/5B_DW.png"
   },
    {
        title: "3Doo",
        type: {1:"2022"},
        description: "A custom made data connector between Odoo (ERP) and 3Dexperience (PLM).",
        full_text: `
        <p> After changing roles from a Business Analyst to a Data Engineer at 5B, a solar array manufacturing start-up, I pitched and build multiple projects. The one I started with, was integrating our engineering and supply chain databases (Entreprise Resource Planning (ERP) <> Computer Aided Design (CAD) Software integration). The aim of the project was to: <ol><li> Reduce Engineering to Order (ETO) Time by 5-10%. </li> <li> Reduce manufacturing downtime and sourcing costs due to human error in cross-referencing 50+ products for each new product configuration. </li> <li> Change from an ETO process relying on technical knowledge (Production Lead) to a scalable systematised ETO. </li></ol> </p>  <p> The results was custom software with Google Apps Script, allowing users to import data from both databases into google drive, compare product meta data and build an importable ERP Bill of Material (BoM) from the CAD BoM. You can find below a product demo: </p> <div style="display: flex; justify-content: center;"> <iframe width="560" height="315" src="https://www.youtube.com/embed/DsvPQG2PCvY?si=DTTTrK-yF9C_enLd" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe> </div> <p> While the efficiency and error reduction targets where achieved, this product failed to fully systematise the CAD <> ERP process ETO. Indeed, it still required expertise to run the Google Script, and I ended up handing it off to my replacement. Finally, In the research phase before deciding to build our own, I found this SolidWorks <> Odoo ERP Integration tool that was pretty similar to what I ended up building, which would be an alternative to in house code software to solve this problem (specifically for Solidwords <> Odoo) :  </p> <div style="display: flex; justify-content: center;"> <iframe width="560" height="315" src="https://www.youtube.com/embed/v4Y5CS_EJ_0?si=w99PtVT5YpfY2Kdr" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe> </div>
        `,
        date: "2022",
        tags: {1:"Odoo",2:"3Dexperience",3:"Google Apps Script"},
        image: "https://t3-portofolio.s3.us-east-2.amazonaws.com/thumbnails/3Doo.png"
    },
    {
        title: "Greenhouse crop model",
        type: {1:"2021"},
        description: "Using Rhino CAD to model light and tomato crop growth under a semi-transparent solar panels greenhouse. Paper published in Applied Energy",
        full_text: `
        <p> As I was doing my master's in Solar Energy at the University of New South Wales (UNSW) in Sydney, I became increasingly interested in Agriphotovoltaic (APV). APV is combination of using solar panels to transform the sun's energy into electricity, as well as plants for chemical energy. Multiple synergies had already been proven in this field, but I was interested in the synergies that semi-transparent solar cells could bring to APV. </p> <div style="text-align: center;"> <iframe src="https://drive.google.com/file/d/1BlY7BPrw3y0KqKGF8WYg3WazDnGyPFAa/preview" width="640" height="480"></iframe> </div> <p> Challenge was finding the right software to model everyhting. Paper is not that interesting but the methodology was novel so we decided to publish (the idea had already been explored in 2-3 papers - but never with a modelling methodology) 
        `,
        date: "2021",
        tags: {1:"Rhino CAD",2:"Rhino Grasshoper", 3:"Python",  4:"Data Modeling"},
        image: "https://t3-portofolio.s3.us-east-2.amazonaws.com/thumbnails/thesis_rhino.png"
    },
    {
        title: "Smart Solar Designs",
        type: {1:"2021"},
        description: "Electric Single Line Diagram (SLD) Automation (desktop app) for residential solar",
        full_text: `
        <p>During my final year at the University of New South Wales (UNSW), I worked part-time as a residential rooft-top solar system designer for a solar installer. My primary responsibility involved creating Single Line Diagrams (SLD) tailored to each house, using information provided by our sales team and various product specifications. After manually designing numerous SLDs and gaining a deep understanding of their mechanics, I began to automate the process.</p>
        <p>Initially, I developed Excel templates featuring pre-filled formulas for calculations like voltage. I also introduced a main page in these templates, incorporating parameters and Visual Basic for Applications (VBA) functions. These functions helped in selecting the appropriate template for each job and removing unnecessary geometrical shapes (eg. templates had 3 phase as default but if single phase house it would delete 2 phases from SLD).</p>
        <p>Eventually, after creating numerous templates, I developed a user interface (UI) using Python and Tkinter. This UI included a comprehensive product database in JSON format and several advanced features, such as the ability to save projects, retrieve job information from our CRM APIs, and generate PDFs. You can view the final result in the video below:</p>
        <div style="display: flex; justify-content: center;"><iframe width="560" height="315" src="https://www.youtube.com/embed/gEQEteRoiHQ?si=QJK_Ocojfg6hBTpB" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe></div>
        <p>In this first big coding project, I not only enhanced my existing Python skills (previously applied in a high-school project to develop a Snake game) but also acquired new competencies in GitHub versioning, Excel VBA, packaging python for desktop application and Bash for file. Creating this software not only expanded my skill set, but also reduced the time required to create a single SLD, from 2 hours to just 5-10 minutes. This efficiency gain enabled me to learn about and contribute to commercial solar projects at my workplace.</p>
        `,
        date: "2021",
        tags: {1:"Python",2:"Excel VBA"},
        image: "https://t3-portofolio.s3.us-east-2.amazonaws.com/thumbnails/SmartSolarDesign.png"
    },
];